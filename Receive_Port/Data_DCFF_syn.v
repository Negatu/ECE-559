// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: dcfifo_mixed_widths 

// ============================================================
// File Name: Data_DCFF.v
// Megafunction Name(s):
// 			dcfifo_mixed_widths
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 9.1 Build 350 03/24/2010 SP 2 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2010 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//dcfifo_mixed_widths DEVICE_FAMILY="Cyclone II" LPM_NUMWORDS=4096 LPM_SHOWAHEAD="OFF" LPM_WIDTH=4 LPM_WIDTH_R=8 LPM_WIDTHU=12 LPM_WIDTHU_R=11 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=4 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRITE_ACLR_SYNCH="OFF" WRSYNC_DELAYPIPE=4 aclr data q rdclk rdempty rdreq wrclk wrfull wrreq INTENDED_DEVICE_FAMILY="Cyclone II" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 9.1SP2 cbx_a_gray2bin 2010:03:24:20:43:42:SJ cbx_a_graycounter 2010:03:24:20:43:42:SJ cbx_altdpram 2010:03:24:20:43:42:SJ cbx_altsyncram 2010:03:24:20:43:42:SJ cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_dcfifo 2010:03:24:20:43:43:SJ cbx_fifo_common 2010:03:24:20:43:42:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_lpm_counter 2010:03:24:20:43:43:SJ cbx_lpm_decode 2010:03:24:20:43:43:SJ cbx_lpm_mux 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_scfifo 2010:03:24:20:43:43:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ cbx_stratixiii 2010:03:24:20:43:43:SJ cbx_util_mgl 2010:03:24:20:43:43:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//a_graycounter DEVICE_FAMILY="Cyclone II" WIDTH=12 aclr clock cnt_en q
//VERSION_BEGIN 9.1SP2 cbx_a_gray2bin 2010:03:24:20:43:42:SJ cbx_a_graycounter 2010:03:24:20:43:42:SJ cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = reg 16 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to sub_parity6a[0]} POWER_UP_LEVEL=HIGH"} *)
module  Data_DCFF_a_graycounter
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [11:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[11:0]	counter7a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	parity5;
	reg	[2:0]	sub_parity6a;
	wire  [11:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter7a[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[0:0] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[0:0] <= 1'b0;
			else  counter7a[0:0] <= ((cnt_en & (counter7a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter7a[0:0]));
	// synopsys translate_off
	initial
		counter7a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[1:1] <= 1'b0;
			else  counter7a[1:1] <= (counter7a[1:1] ^ (counter7a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter7a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[2:2] <= 1'b0;
			else  counter7a[2:2] <= (counter7a[2:2] ^ (counter7a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter7a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[3:3] <= 1'b0;
			else  counter7a[3:3] <= (counter7a[3:3] ^ (counter7a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter7a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[4:4] <= 1'b0;
			else  counter7a[4:4] <= (counter7a[4:4] ^ (counter7a[3:3] & cntr_cout[3]));
	// synopsys translate_off
	initial
		counter7a[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[5:5] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[5:5] <= 1'b0;
			else  counter7a[5:5] <= (counter7a[5:5] ^ (counter7a[4:4] & cntr_cout[4]));
	// synopsys translate_off
	initial
		counter7a[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[6:6] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[6:6] <= 1'b0;
			else  counter7a[6:6] <= (counter7a[6:6] ^ (counter7a[5:5] & cntr_cout[5]));
	// synopsys translate_off
	initial
		counter7a[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[7:7] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[7:7] <= 1'b0;
			else  counter7a[7:7] <= (counter7a[7:7] ^ (counter7a[6:6] & cntr_cout[6]));
	// synopsys translate_off
	initial
		counter7a[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[8:8] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[8:8] <= 1'b0;
			else  counter7a[8:8] <= (counter7a[8:8] ^ (counter7a[7:7] & cntr_cout[7]));
	// synopsys translate_off
	initial
		counter7a[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[9:9] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[9:9] <= 1'b0;
			else  counter7a[9:9] <= (counter7a[9:9] ^ (counter7a[8:8] & cntr_cout[8]));
	// synopsys translate_off
	initial
		counter7a[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[10:10] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[10:10] <= 1'b0;
			else  counter7a[10:10] <= (counter7a[10:10] ^ (counter7a[9:9] & cntr_cout[9]));
	// synopsys translate_off
	initial
		counter7a[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[11:11] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[11:11] <= 1'b0;
			else  counter7a[11:11] <= (counter7a[11:11] ^ cntr_cout[10]);
	// synopsys translate_off
	initial
		parity5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity5 <= 1'b0;
		else
			if (sclr == 1'b1) parity5 <= 1'b0;
			else  parity5 <= ((cnt_en & ((sub_parity6a[0] ^ sub_parity6a[1]) ^ sub_parity6a[2])) | ((~ cnt_en) & parity5));
	// synopsys translate_off
	initial
		sub_parity6a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity6a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) sub_parity6a[0:0] <= 1'b0;
			else  sub_parity6a[0:0] <= ((cnt_en & (((counter7a[0] ^ counter7a[1]) ^ counter7a[2]) ^ counter7a[3])) | ((~ cnt_en) & sub_parity6a[0:0]));
	// synopsys translate_off
	initial
		sub_parity6a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity6a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity6a[1:1] <= 1'b0;
			else  sub_parity6a[1:1] <= ((cnt_en & (((counter7a[4] ^ counter7a[5]) ^ counter7a[6]) ^ counter7a[7])) | ((~ cnt_en) & sub_parity6a[1:1]));
	// synopsys translate_off
	initial
		sub_parity6a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity6a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity6a[2:2] <= 1'b0;
			else  sub_parity6a[2:2] <= ((cnt_en & (((counter7a[8] ^ counter7a[9]) ^ counter7a[10]) ^ counter7a[11])) | ((~ cnt_en) & sub_parity6a[2:2]));
	assign
		cntr_cout = {1'b0, (cntr_cout[9] & (~ counter7a[9:9])), (cntr_cout[8] & (~ counter7a[8:8])), (cntr_cout[7] & (~ counter7a[7:7])), (cntr_cout[6] & (~ counter7a[6:6])), (cntr_cout[5] & (~ counter7a[5:5])), (cntr_cout[4] & (~ counter7a[4:4])), (cntr_cout[3] & (~ counter7a[3:3])), (cntr_cout[2] & (~ counter7a[2:2])), (cntr_cout[1] & (~ counter7a[1:1])), (cntr_cout[0] & (~ counter7a[0:0])), (cnt_en & parity_cout)},
		parity_cout = ((parity5 ^ (~ updown)) & cnt_en),
		q = counter7a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //Data_DCFF_a_graycounter


//a_graycounter DEVICE_FAMILY="Cyclone II" PVALUE=0 WIDTH=12 aclr clock cnt_en q ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=s102
//VERSION_BEGIN 9.1SP2 cbx_a_gray2bin 2010:03:24:20:43:42:SJ cbx_a_graycounter 2010:03:24:20:43:42:SJ cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = reg 16 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=s102;{-to sub_parity9a[0]} POWER_UP_LEVEL=HIGH"} *)
module  Data_DCFF_a_graycounter1
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [11:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[11:0]	counter10a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	parity8;
	reg	[2:0]	sub_parity9a;
	wire  [11:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter10a[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[0:0] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[0:0] <= 1'b0;
			else  counter10a[0:0] <= ((cnt_en & (counter10a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter10a[0:0]));
	// synopsys translate_off
	initial
		counter10a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[1:1] <= 1'b0;
			else  counter10a[1:1] <= (counter10a[1:1] ^ (counter10a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter10a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[2:2] <= 1'b0;
			else  counter10a[2:2] <= (counter10a[2:2] ^ (counter10a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter10a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[3:3] <= 1'b0;
			else  counter10a[3:3] <= (counter10a[3:3] ^ (counter10a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter10a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[4:4] <= 1'b0;
			else  counter10a[4:4] <= (counter10a[4:4] ^ (counter10a[3:3] & cntr_cout[3]));
	// synopsys translate_off
	initial
		counter10a[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[5:5] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[5:5] <= 1'b0;
			else  counter10a[5:5] <= (counter10a[5:5] ^ (counter10a[4:4] & cntr_cout[4]));
	// synopsys translate_off
	initial
		counter10a[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[6:6] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[6:6] <= 1'b0;
			else  counter10a[6:6] <= (counter10a[6:6] ^ (counter10a[5:5] & cntr_cout[5]));
	// synopsys translate_off
	initial
		counter10a[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[7:7] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[7:7] <= 1'b0;
			else  counter10a[7:7] <= (counter10a[7:7] ^ (counter10a[6:6] & cntr_cout[6]));
	// synopsys translate_off
	initial
		counter10a[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[8:8] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[8:8] <= 1'b0;
			else  counter10a[8:8] <= (counter10a[8:8] ^ (counter10a[7:7] & cntr_cout[7]));
	// synopsys translate_off
	initial
		counter10a[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[9:9] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[9:9] <= 1'b0;
			else  counter10a[9:9] <= (counter10a[9:9] ^ (counter10a[8:8] & cntr_cout[8]));
	// synopsys translate_off
	initial
		counter10a[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[10:10] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[10:10] <= 1'b0;
			else  counter10a[10:10] <= (counter10a[10:10] ^ (counter10a[9:9] & cntr_cout[9]));
	// synopsys translate_off
	initial
		counter10a[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter10a[11:11] <= 1'b0;
		else
			if (sclr == 1'b1) counter10a[11:11] <= 1'b0;
			else  counter10a[11:11] <= (counter10a[11:11] ^ cntr_cout[10]);
	// synopsys translate_off
	initial
		parity8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity8 <= 1'b0;
		else
			if (sclr == 1'b1) parity8 <= 1'b0;
			else  parity8 <= ((cnt_en & ((sub_parity9a[0] ^ sub_parity9a[1]) ^ sub_parity9a[2])) | ((~ cnt_en) & parity8));
	// synopsys translate_off
	initial
		sub_parity9a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity9a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) sub_parity9a[0:0] <= 1'b0;
			else  sub_parity9a[0:0] <= ((cnt_en & (((counter10a[0] ^ counter10a[1]) ^ counter10a[2]) ^ counter10a[3])) | ((~ cnt_en) & sub_parity9a[0:0]));
	// synopsys translate_off
	initial
		sub_parity9a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity9a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity9a[1:1] <= 1'b0;
			else  sub_parity9a[1:1] <= ((cnt_en & (((counter10a[4] ^ counter10a[5]) ^ counter10a[6]) ^ counter10a[7])) | ((~ cnt_en) & sub_parity9a[1:1]));
	// synopsys translate_off
	initial
		sub_parity9a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity9a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity9a[2:2] <= 1'b0;
			else  sub_parity9a[2:2] <= ((cnt_en & (((counter10a[8] ^ counter10a[9]) ^ counter10a[10]) ^ counter10a[11])) | ((~ cnt_en) & sub_parity9a[2:2]));
	assign
		cntr_cout = {1'b0, (cntr_cout[9] & (~ counter10a[9:9])), (cntr_cout[8] & (~ counter10a[8:8])), (cntr_cout[7] & (~ counter10a[7:7])), (cntr_cout[6] & (~ counter10a[6:6])), (cntr_cout[5] & (~ counter10a[5:5])), (cntr_cout[4] & (~ counter10a[4:4])), (cntr_cout[3] & (~ counter10a[3:3])), (cntr_cout[2] & (~ counter10a[2:2])), (cntr_cout[1] & (~ counter10a[1:1])), (cntr_cout[0] & (~ counter10a[0:0])), (cnt_en & parity_cout)},
		parity_cout = ((parity8 ^ (~ updown)) & cnt_en),
		q = counter10a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //Data_DCFF_a_graycounter1


//altsyncram ADDRESS_REG_B="CLOCK1" CLOCK_ENABLE_INPUT_B="BYPASS" DEVICE_FAMILY="Cyclone II" OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="CLEAR1" OUTDATA_REG_B="CLOCK1" WIDTH_A=4 WIDTH_B=8 WIDTH_BYTEENA_A=1 WIDTHAD_A=12 WIDTHAD_B=11 aclr1 address_a address_b addressstall_b clock0 clock1 clocken1 data_a q_b wren_a ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=r105
//VERSION_BEGIN 9.1SP2 cbx_altsyncram 2010:03:24:20:43:42:SJ cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_lpm_decode 2010:03:24:20:43:43:SJ cbx_lpm_mux 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ cbx_stratixiii 2010:03:24:20:43:43:SJ cbx_util_mgl 2010:03:24:20:43:43:SJ  VERSION_END


//altsyncram ADDRESS_REG_B="CLOCK1" CLOCK_ENABLE_INPUT_A="BYPASS" CLOCK_ENABLE_INPUT_B="NORMAL" CYCLONEII_SAFE_WRITE="NO_CHANGE" DEVICE_FAMILY="Cyclone II" OPERATION_MODE="BIDIR_DUAL_PORT" OUTDATA_ACLR_A="CLEAR1" OUTDATA_REG_A="CLOCK0" WIDTH_A=8 WIDTH_B=4 WIDTH_BYTEENA_A=1 WIDTH_BYTEENA_B=1 WIDTHAD_A=11 WIDTHAD_B=12 WRCONTROL_WRADDRESS_REG_B="CLOCK1" aclr1 address_a address_b addressstall_a clock0 clock1 clocken0 clocken1 data_a data_b q_a wren_a wren_b
//VERSION_BEGIN 9.1SP2 cbx_altsyncram 2010:03:24:20:43:42:SJ cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_lpm_decode 2010:03:24:20:43:43:SJ cbx_lpm_mux 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ cbx_stratixiii 2010:03:24:20:43:43:SJ cbx_util_mgl 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = M4K 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  Data_DCFF_altsyncram1
	( 
	aclr1,
	address_a,
	address_b,
	addressstall_a,
	clock0,
	clock1,
	clocken0,
	clocken1,
	data_a,
	data_b,
	q_a,
	q_b,
	wren_a,
	wren_b) /* synthesis synthesis_clearbox=1 */;
	input   aclr1;
	input   [10:0]  address_a;
	input   [11:0]  address_b;
	input   addressstall_a;
	input   clock0;
	input   clock1;
	input   clocken0;
	input   clocken1;
	input   [7:0]  data_a;
	input   [3:0]  data_b;
	output   [7:0]  q_a;
	output   [3:0]  q_b;
	input   wren_a;
	input   wren_b;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr1;
	tri1   [11:0]  address_b;
	tri0   addressstall_a;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken0;
	tri1   clocken1;
	tri1   [7:0]  data_a;
	tri1   [3:0]  data_b;
	tri0   wren_a;
	tri0   wren_b;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [1:0]   wire_ram_block12a_0portadataout;
	wire  [1:0]   wire_ram_block12a_1portadataout;
	wire  [1:0]   wire_ram_block12a_2portadataout;
	wire  [1:0]   wire_ram_block12a_3portadataout;
	wire  [0:0]   wire_ram_block12a_0portbdataout;
	wire  [0:0]   wire_ram_block12a_1portbdataout;
	wire  [0:0]   wire_ram_block12a_2portbdataout;
	wire  [0:0]   wire_ram_block12a_3portbdataout;
	wire  [10:0]  address_a_wire;
	wire  [11:0]  address_b_wire;

	cycloneii_ram_block   ram_block12a_0
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(clocken0),
	.ena1(clocken1),
	.portaaddr({address_a_wire[10:0]}),
	.portaaddrstall(addressstall_a),
	.portadatain({data_a[4], data_a[0]}),
	.portadataout(wire_ram_block12a_0portadataout[1:0]),
	.portawe(wren_a),
	.portbaddr({address_b_wire[11:0]}),
	.portbdatain({data_b[0]}),
	.portbdataout(wire_ram_block12a_0portbdataout[0:0]),
	.portbrewe(wren_b)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block12a_0.connectivity_checking = "OFF",
		ram_block12a_0.data_interleave_offset_in_bits = 4,
		ram_block12a_0.data_interleave_width_in_bits = 1,
		ram_block12a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block12a_0.mixed_port_feed_through_mode = "dont_care",
		ram_block12a_0.operation_mode = "bidir_dual_port",
		ram_block12a_0.port_a_address_width = 11,
		ram_block12a_0.port_a_data_out_clear = "clear1",
		ram_block12a_0.port_a_data_out_clock = "clock0",
		ram_block12a_0.port_a_data_width = 2,
		ram_block12a_0.port_a_disable_ce_on_input_registers = "on",
		ram_block12a_0.port_a_disable_ce_on_output_registers = "off",
		ram_block12a_0.port_a_first_address = 0,
		ram_block12a_0.port_a_first_bit_number = 0,
		ram_block12a_0.port_a_last_address = 2047,
		ram_block12a_0.port_a_logical_ram_depth = 2048,
		ram_block12a_0.port_a_logical_ram_width = 8,
		ram_block12a_0.port_b_address_clock = "clock1",
		ram_block12a_0.port_b_address_width = 12,
		ram_block12a_0.port_b_data_in_clock = "clock1",
		ram_block12a_0.port_b_data_width = 1,
		ram_block12a_0.port_b_disable_ce_on_input_registers = "off",
		ram_block12a_0.port_b_disable_ce_on_output_registers = "on",
		ram_block12a_0.port_b_first_address = 0,
		ram_block12a_0.port_b_first_bit_number = 0,
		ram_block12a_0.port_b_last_address = 4095,
		ram_block12a_0.port_b_logical_ram_depth = 4096,
		ram_block12a_0.port_b_logical_ram_width = 4,
		ram_block12a_0.port_b_read_enable_write_enable_clock = "clock1",
		ram_block12a_0.ram_block_type = "AUTO",
		ram_block12a_0.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block12a_1
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(clocken0),
	.ena1(clocken1),
	.portaaddr({address_a_wire[10:0]}),
	.portaaddrstall(addressstall_a),
	.portadatain({data_a[5], data_a[1]}),
	.portadataout(wire_ram_block12a_1portadataout[1:0]),
	.portawe(wren_a),
	.portbaddr({address_b_wire[11:0]}),
	.portbdatain({data_b[1]}),
	.portbdataout(wire_ram_block12a_1portbdataout[0:0]),
	.portbrewe(wren_b)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block12a_1.connectivity_checking = "OFF",
		ram_block12a_1.data_interleave_offset_in_bits = 4,
		ram_block12a_1.data_interleave_width_in_bits = 1,
		ram_block12a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block12a_1.mixed_port_feed_through_mode = "dont_care",
		ram_block12a_1.operation_mode = "bidir_dual_port",
		ram_block12a_1.port_a_address_width = 11,
		ram_block12a_1.port_a_data_out_clear = "clear1",
		ram_block12a_1.port_a_data_out_clock = "clock0",
		ram_block12a_1.port_a_data_width = 2,
		ram_block12a_1.port_a_disable_ce_on_input_registers = "on",
		ram_block12a_1.port_a_disable_ce_on_output_registers = "off",
		ram_block12a_1.port_a_first_address = 0,
		ram_block12a_1.port_a_first_bit_number = 1,
		ram_block12a_1.port_a_last_address = 2047,
		ram_block12a_1.port_a_logical_ram_depth = 2048,
		ram_block12a_1.port_a_logical_ram_width = 8,
		ram_block12a_1.port_b_address_clock = "clock1",
		ram_block12a_1.port_b_address_width = 12,
		ram_block12a_1.port_b_data_in_clock = "clock1",
		ram_block12a_1.port_b_data_width = 1,
		ram_block12a_1.port_b_disable_ce_on_input_registers = "off",
		ram_block12a_1.port_b_disable_ce_on_output_registers = "on",
		ram_block12a_1.port_b_first_address = 0,
		ram_block12a_1.port_b_first_bit_number = 1,
		ram_block12a_1.port_b_last_address = 4095,
		ram_block12a_1.port_b_logical_ram_depth = 4096,
		ram_block12a_1.port_b_logical_ram_width = 4,
		ram_block12a_1.port_b_read_enable_write_enable_clock = "clock1",
		ram_block12a_1.ram_block_type = "AUTO",
		ram_block12a_1.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block12a_2
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(clocken0),
	.ena1(clocken1),
	.portaaddr({address_a_wire[10:0]}),
	.portaaddrstall(addressstall_a),
	.portadatain({data_a[6], data_a[2]}),
	.portadataout(wire_ram_block12a_2portadataout[1:0]),
	.portawe(wren_a),
	.portbaddr({address_b_wire[11:0]}),
	.portbdatain({data_b[2]}),
	.portbdataout(wire_ram_block12a_2portbdataout[0:0]),
	.portbrewe(wren_b)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block12a_2.connectivity_checking = "OFF",
		ram_block12a_2.data_interleave_offset_in_bits = 4,
		ram_block12a_2.data_interleave_width_in_bits = 1,
		ram_block12a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block12a_2.mixed_port_feed_through_mode = "dont_care",
		ram_block12a_2.operation_mode = "bidir_dual_port",
		ram_block12a_2.port_a_address_width = 11,
		ram_block12a_2.port_a_data_out_clear = "clear1",
		ram_block12a_2.port_a_data_out_clock = "clock0",
		ram_block12a_2.port_a_data_width = 2,
		ram_block12a_2.port_a_disable_ce_on_input_registers = "on",
		ram_block12a_2.port_a_disable_ce_on_output_registers = "off",
		ram_block12a_2.port_a_first_address = 0,
		ram_block12a_2.port_a_first_bit_number = 2,
		ram_block12a_2.port_a_last_address = 2047,
		ram_block12a_2.port_a_logical_ram_depth = 2048,
		ram_block12a_2.port_a_logical_ram_width = 8,
		ram_block12a_2.port_b_address_clock = "clock1",
		ram_block12a_2.port_b_address_width = 12,
		ram_block12a_2.port_b_data_in_clock = "clock1",
		ram_block12a_2.port_b_data_width = 1,
		ram_block12a_2.port_b_disable_ce_on_input_registers = "off",
		ram_block12a_2.port_b_disable_ce_on_output_registers = "on",
		ram_block12a_2.port_b_first_address = 0,
		ram_block12a_2.port_b_first_bit_number = 2,
		ram_block12a_2.port_b_last_address = 4095,
		ram_block12a_2.port_b_logical_ram_depth = 4096,
		ram_block12a_2.port_b_logical_ram_width = 4,
		ram_block12a_2.port_b_read_enable_write_enable_clock = "clock1",
		ram_block12a_2.ram_block_type = "AUTO",
		ram_block12a_2.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block12a_3
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(clocken0),
	.ena1(clocken1),
	.portaaddr({address_a_wire[10:0]}),
	.portaaddrstall(addressstall_a),
	.portadatain({data_a[7], data_a[3]}),
	.portadataout(wire_ram_block12a_3portadataout[1:0]),
	.portawe(wren_a),
	.portbaddr({address_b_wire[11:0]}),
	.portbdatain({data_b[3]}),
	.portbdataout(wire_ram_block12a_3portbdataout[0:0]),
	.portbrewe(wren_b)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block12a_3.connectivity_checking = "OFF",
		ram_block12a_3.data_interleave_offset_in_bits = 4,
		ram_block12a_3.data_interleave_width_in_bits = 1,
		ram_block12a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block12a_3.mixed_port_feed_through_mode = "dont_care",
		ram_block12a_3.operation_mode = "bidir_dual_port",
		ram_block12a_3.port_a_address_width = 11,
		ram_block12a_3.port_a_data_out_clear = "clear1",
		ram_block12a_3.port_a_data_out_clock = "clock0",
		ram_block12a_3.port_a_data_width = 2,
		ram_block12a_3.port_a_disable_ce_on_input_registers = "on",
		ram_block12a_3.port_a_disable_ce_on_output_registers = "off",
		ram_block12a_3.port_a_first_address = 0,
		ram_block12a_3.port_a_first_bit_number = 3,
		ram_block12a_3.port_a_last_address = 2047,
		ram_block12a_3.port_a_logical_ram_depth = 2048,
		ram_block12a_3.port_a_logical_ram_width = 8,
		ram_block12a_3.port_b_address_clock = "clock1",
		ram_block12a_3.port_b_address_width = 12,
		ram_block12a_3.port_b_data_in_clock = "clock1",
		ram_block12a_3.port_b_data_width = 1,
		ram_block12a_3.port_b_disable_ce_on_input_registers = "off",
		ram_block12a_3.port_b_disable_ce_on_output_registers = "on",
		ram_block12a_3.port_b_first_address = 0,
		ram_block12a_3.port_b_first_bit_number = 3,
		ram_block12a_3.port_b_last_address = 4095,
		ram_block12a_3.port_b_logical_ram_depth = 4096,
		ram_block12a_3.port_b_logical_ram_width = 4,
		ram_block12a_3.port_b_read_enable_write_enable_clock = "clock1",
		ram_block12a_3.ram_block_type = "AUTO",
		ram_block12a_3.lpm_type = "cycloneii_ram_block";
	assign
		address_a_wire = address_a,
		address_b_wire = address_b,
		q_a = {wire_ram_block12a_3portadataout[1], wire_ram_block12a_2portadataout[1], wire_ram_block12a_1portadataout[1], wire_ram_block12a_0portadataout[1], wire_ram_block12a_3portadataout[0], wire_ram_block12a_2portadataout[0], wire_ram_block12a_1portadataout[0], wire_ram_block12a_0portadataout[0]},
		q_b = {wire_ram_block12a_3portbdataout[0], wire_ram_block12a_2portbdataout[0], wire_ram_block12a_1portbdataout[0], wire_ram_block12a_0portbdataout[0]};
endmodule //Data_DCFF_altsyncram1

//synthesis_resources = M4K 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=r105;OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  Data_DCFF_altsyncram
	( 
	aclr1,
	address_a,
	address_b,
	addressstall_b,
	clock0,
	clock1,
	clocken1,
	data_a,
	q_b,
	wren_a) /* synthesis synthesis_clearbox=1 */;
	input   aclr1;
	input   [11:0]  address_a;
	input   [10:0]  address_b;
	input   addressstall_b;
	input   clock0;
	input   clock1;
	input   clocken1;
	input   [3:0]  data_a;
	output   [7:0]  q_b;
	input   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr1;
	tri1   [10:0]  address_b;
	tri0   addressstall_b;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken1;
	tri1   [3:0]  data_a;
	tri0   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [7:0]   wire_altsyncram11_q_a;
	wire  [3:0]   wire_altsyncram11_q_b;

	Data_DCFF_altsyncram1   altsyncram11
	( 
	.aclr1(aclr1),
	.address_a(address_b),
	.address_b(address_a),
	.addressstall_a(addressstall_b),
	.clock0(clock1),
	.clock1(clock0),
	.clocken0(clocken1),
	.clocken1(wren_a),
	.data_a({8{1'b1}}),
	.data_b(data_a),
	.q_a(wire_altsyncram11_q_a),
	.q_b(wire_altsyncram11_q_b),
	.wren_a(1'b0),
	.wren_b(wren_a));
	assign
		q_b = wire_altsyncram11_q_a;
endmodule //Data_DCFF_altsyncram


//dffpipe DELAY=1 WIDTH=1 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF;PRESERVE_REGISTER=ON;suppress_da_rule_internal=c106;suppress_da_rule_internal=r105
//VERSION_BEGIN 9.1SP2 cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratixii 2010:03:24:20:43:43:SJ cbx_util_mgl 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = reg 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;PRESERVE_REGISTER=ON;suppress_da_rule_internal=c106;suppress_da_rule_internal=r105"} *)
module  Data_DCFF_dffpipe
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [0:0]  d;
	output   [0:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[0:0]	dffe13a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe13a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe13a <= {1{1'b1}};
		else if (clrn == 1'b0) dffe13a <= 1'b0;
		else if  (ena == 1'b1)   dffe13a <= (d & (~ sclr));
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe13a,
		sclr = 1'b0;
endmodule //Data_DCFF_dffpipe


//dffpipe DELAY=2 WIDTH=12 clock clrn d q ALTERA_INTERNAL_OPTIONS=X_ON_VIOLATION_OPTION=OFF;suppress_da_rule_internal=r105
//VERSION_BEGIN 9.1SP2 cbx_a_gray2bin 2010:03:24:20:43:42:SJ cbx_a_graycounter 2010:03:24:20:43:42:SJ cbx_altdpram 2010:03:24:20:43:42:SJ cbx_altsyncram 2010:03:24:20:43:42:SJ cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_dcfifo 2010:03:24:20:43:43:SJ cbx_fifo_common 2010:03:24:20:43:42:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_lpm_counter 2010:03:24:20:43:43:SJ cbx_lpm_decode 2010:03:24:20:43:43:SJ cbx_lpm_mux 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_scfifo 2010:03:24:20:43:43:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ cbx_stratixiii 2010:03:24:20:43:43:SJ cbx_util_mgl 2010:03:24:20:43:43:SJ  VERSION_END


//dffpipe DELAY=2 WIDTH=12 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 9.1SP2 cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratixii 2010:03:24:20:43:43:SJ cbx_util_mgl 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = reg 24 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  Data_DCFF_dffpipe1
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [11:0]  d;
	output   [11:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[11:0]	dffe15a;
	reg	[11:0]	dffe16a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe15a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe15a <= {12{1'b1}};
		else if (clrn == 1'b0) dffe15a <= 12'b0;
		else if  (ena == 1'b1)   dffe15a <= (d & {12{(~ sclr)}});
	// synopsys translate_off
	initial
		dffe16a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe16a <= {12{1'b1}};
		else if (clrn == 1'b0) dffe16a <= 12'b0;
		else if  (ena == 1'b1)   dffe16a <= (dffe15a & {12{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe16a,
		sclr = 1'b0;
endmodule //Data_DCFF_dffpipe1

//synthesis_resources = reg 24 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"X_ON_VIOLATION_OPTION=OFF;suppress_da_rule_internal=r105"} *)
module  Data_DCFF_alt_synch_pipe
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [11:0]  d;
	output   [11:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [11:0]   wire_dffpipe14_q;

	Data_DCFF_dffpipe1   dffpipe14
	( 
	.clock(clock),
	.clrn(clrn),
	.d(d),
	.q(wire_dffpipe14_q));
	assign
		q = wire_dffpipe14_q;
endmodule //Data_DCFF_alt_synch_pipe


//dffpipe DELAY=2 WIDTH=12 clock clrn d q ALTERA_INTERNAL_OPTIONS=X_ON_VIOLATION_OPTION=OFF
//VERSION_BEGIN 9.1SP2 cbx_a_gray2bin 2010:03:24:20:43:42:SJ cbx_a_graycounter 2010:03:24:20:43:42:SJ cbx_altdpram 2010:03:24:20:43:42:SJ cbx_altsyncram 2010:03:24:20:43:42:SJ cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_dcfifo 2010:03:24:20:43:43:SJ cbx_fifo_common 2010:03:24:20:43:42:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_lpm_counter 2010:03:24:20:43:43:SJ cbx_lpm_decode 2010:03:24:20:43:43:SJ cbx_lpm_mux 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_scfifo 2010:03:24:20:43:43:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ cbx_stratixiii 2010:03:24:20:43:43:SJ cbx_util_mgl 2010:03:24:20:43:43:SJ  VERSION_END


//dffpipe DELAY=2 WIDTH=12 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 9.1SP2 cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratixii 2010:03:24:20:43:43:SJ cbx_util_mgl 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = reg 24 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  Data_DCFF_dffpipe2
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [11:0]  d;
	output   [11:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[11:0]	dffe18a;
	reg	[11:0]	dffe19a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe18a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe18a <= {12{1'b1}};
		else if (clrn == 1'b0) dffe18a <= 12'b0;
		else if  (ena == 1'b1)   dffe18a <= (d & {12{(~ sclr)}});
	// synopsys translate_off
	initial
		dffe19a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe19a <= {12{1'b1}};
		else if (clrn == 1'b0) dffe19a <= 12'b0;
		else if  (ena == 1'b1)   dffe19a <= (dffe18a & {12{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe19a,
		sclr = 1'b0;
endmodule //Data_DCFF_dffpipe2

//synthesis_resources = reg 24 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"X_ON_VIOLATION_OPTION=OFF"} *)
module  Data_DCFF_alt_synch_pipe1
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [11:0]  d;
	output   [11:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [11:0]   wire_dffpipe17_q;

	Data_DCFF_dffpipe2   dffpipe17
	( 
	.clock(clock),
	.clrn(clrn),
	.d(d),
	.q(wire_dffpipe17_q));
	assign
		q = wire_dffpipe17_q;
endmodule //Data_DCFF_alt_synch_pipe1


//lpm_compare DEVICE_FAMILY="Cyclone II" LPM_WIDTH=12 aeb dataa datab
//VERSION_BEGIN 9.1SP2 cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  Data_DCFF_cmpr
	( 
	aeb,
	dataa,
	datab) /* synthesis synthesis_clearbox=1 */;
	output   aeb;
	input   [11:0]  dataa;
	input   [11:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [11:0]  dataa;
	tri0   [11:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  aeb_result_wire;
	wire  [0:0]  aneb_result_wire;
	wire  [31:0]  data_wire;
	wire  eq_wire;

	assign
		aeb = eq_wire,
		aeb_result_wire = (~ aneb_result_wire),
		aneb_result_wire = (data_wire[0] | data_wire[1]),
		data_wire = {datab[11], dataa[11], datab[10], dataa[10], datab[9], dataa[9], datab[8], dataa[8], datab[7], dataa[7], datab[6], dataa[6], datab[5], dataa[5], datab[4], dataa[4], datab[3], dataa[3], datab[2], dataa[2], datab[1], dataa[1], datab[0], dataa[0], ((data_wire[28] ^ data_wire[29]) | (data_wire[30] ^ data_wire[31])), ((data_wire[24] ^ data_wire[25]) | (data_wire[26] ^ data_wire[27])), ((data_wire[20] ^ data_wire[21]) | (data_wire[22] ^ data_wire[23])), ((data_wire[16] ^ data_wire[17]) | (data_wire[18] ^ data_wire[19])), ((data_wire[12] ^ data_wire[13]) | (data_wire[14] ^ data_wire[15])), ((data_wire[8] ^ data_wire[9]) | (data_wire[10] ^ data_wire[11])), (data_wire[6] | data_wire[7]), (((data_wire[2] | data_wire[3]) | data_wire[4]) | data_wire[5])},
		eq_wire = aeb_result_wire;
endmodule //Data_DCFF_cmpr


//lpm_counter DEVICE_FAMILY="Cyclone II" lpm_avalue=1 lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_pvalue=1 lpm_width=1 aset clock cnt_en cout q
//VERSION_BEGIN 9.1SP2 cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_lpm_compare 2010:03:24:20:43:43:SJ cbx_lpm_counter 2010:03:24:20:43:43:SJ cbx_lpm_decode 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ  VERSION_END

//synthesis_resources = lut 1 reg 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  Data_DCFF_cntr
	( 
	aset,
	clock,
	cnt_en,
	cout,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aset;
	input   clock;
	input   cnt_en;
	output   cout;
	output   [0:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aset;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_counter_comb_bita_0combout;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire  [0:0]   wire_counter_reg_bit20a_regout;
	wire  [0:0]  a_val;
	wire  aclr_actual;
	wire clk_en;
	wire  cout_actual;
	wire [0:0]  data;
	wire  external_cin;
	wire  [0:0]  pre_hazard;
	wire  [0:0]  s_val;
	wire  [0:0]  safe_q;
	wire sclr;
	wire sload;
	wire sset;
	wire  time_to_clear;
	wire  updown_dir;

	cycloneii_lcell_comb   counter_comb_bita_0
	( 
	.cin(external_cin),
	.combout(wire_counter_comb_bita_0combout[0:0]),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.dataa(wire_counter_reg_bit20a_regout),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_0.lut_mask = 16'h5A60,
		counter_comb_bita_0.sum_lutc_input = "cin",
		counter_comb_bita_0.lpm_type = "cycloneii_lcell_comb";
	cycloneii_lcell_ff   counter_reg_bit20a_0
	( 
	.aclr(aclr_actual),
	.clk(clock),
	.datain(wire_counter_comb_bita_0combout),
	.ena((clk_en & (((cnt_en | sclr) | sset) | sload))),
	.regout(wire_counter_reg_bit20a_regout[0:0]),
	.sdata((a_val ^ ((~ sclr) & ((sset & s_val) | ((~ sset) & data))))),
	.sload(((sclr | sset) | sload)),
	.sclr(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	assign
		a_val = 1'b1,
		aclr_actual = aset,
		clk_en = 1'b1,
		cout = cout_actual,
		cout_actual = (wire_counter_comb_bita_0cout | (time_to_clear & updown_dir)),
		data = 1'b0,
		external_cin = 1'b1,
		pre_hazard = wire_counter_reg_bit20a_regout,
		q = safe_q,
		s_val = 1'b1,
		safe_q = (pre_hazard ^ a_val),
		sclr = 1'b0,
		sload = 1'b0,
		sset = 1'b0,
		time_to_clear = 1'b0,
		updown_dir = 1'b1;
endmodule //Data_DCFF_cntr

//synthesis_resources = lut 1 M4K 4 reg 120 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=S102;-name CUT ON -from rdptr_g -to ws_dgrp|dffpipe17|dffe18a;-name SDC_STATEMENT \"set_false_path -from *rdptr_g* -to *ws_dgrp|Data_DCFF_dffpipe2:dffpipe17|dffe18a* \";-name CUT ON -from delayed_wrptr_g -to rs_dgwp|dffpipe14|dffe15a;-name SDC_STATEMENT \"set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|Data_DCFF_dffpipe1:dffpipe14|dffe15a* \""} *)
module  Data_DCFF_dcfifo
	( 
	aclr,
	data,
	q,
	rdclk,
	rdempty,
	rdreq,
	wrclk,
	wrfull,
	wrreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   [3:0]  data;
	output   [7:0]  q;
	input   rdclk;
	output   rdempty;
	input   rdreq;
	input   wrclk;
	output   wrfull;
	input   wrreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [11:0]   wire_rdptr_g1p_q;
	wire  [11:0]   wire_wrptr_g1p_q;
	wire  [7:0]   wire_fifo_ram_q_b;
	reg	[11:0]	delayed_wrptr_g;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	p0addr;
	(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=r105"} *)
	reg	[11:0]	rdptr_g;
	(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=s102"} *)
	reg	[12:0]	wrptr_g;
	wire  [0:0]   wire_rdaclr_q;
	wire  [11:0]   wire_rs_dgwp_q;
	wire  [11:0]   wire_ws_dgrp_q;
	wire  wire_rdempty_eq_comp_aeb;
	wire  wire_wrfull_eq_comp_aeb;
	wire  wire_cntr_b_cout;
	wire  [0:0]   wire_cntr_b_q;
	wire  int_rdempty;
	wire  int_wrfull;
	wire  [11:0]  ram_address_a;
	wire  [10:0]  ram_address_b;
	wire  rdcnt_addr_ena;
	wire  valid_rdreq;
	wire  valid_wrreq;
	wire  [11:0]  wrptr_gs;

	Data_DCFF_a_graycounter   rdptr_g1p
	( 
	.aclr((~ wire_rdaclr_q)),
	.clock(rdclk),
	.cnt_en(rdcnt_addr_ena),
	.q(wire_rdptr_g1p_q));
	Data_DCFF_a_graycounter1   wrptr_g1p
	( 
	.aclr(aclr),
	.clock(wrclk),
	.cnt_en((valid_wrreq & wire_cntr_b_cout)),
	.q(wire_wrptr_g1p_q));
	Data_DCFF_altsyncram   fifo_ram
	( 
	.aclr1(aclr),
	.address_a(ram_address_a),
	.address_b(ram_address_b),
	.addressstall_b((~ rdcnt_addr_ena)),
	.clock0(wrclk),
	.clock1(rdclk),
	.clocken1(valid_rdreq),
	.data_a(data),
	.q_b(wire_fifo_ram_q_b),
	.wren_a(valid_wrreq));
	// synopsys translate_off
	initial
		delayed_wrptr_g = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  posedge aclr)
		if (aclr == 1'b1) delayed_wrptr_g <= 12'b0;
		else  delayed_wrptr_g <= wrptr_g[12:1];
	// synopsys translate_off
	initial
		p0addr = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  negedge wire_rdaclr_q)
		if (wire_rdaclr_q == 1'b0) p0addr <= 1'b0;
		else  p0addr <= 1'b1;
	// synopsys translate_off
	initial
		rdptr_g = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  posedge aclr)
		if (aclr == 1'b1) rdptr_g <= 12'b0;
		else if  (valid_rdreq == 1'b1)   rdptr_g <= wire_rdptr_g1p_q;
	// synopsys translate_off
	initial
		wrptr_g = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  posedge aclr)
		if (aclr == 1'b1) wrptr_g <= 13'b0;
		else if  (valid_wrreq == 1'b1)   wrptr_g <= {wire_wrptr_g1p_q, wire_cntr_b_q};
	Data_DCFF_dffpipe   rdaclr
	( 
	.clock((~ rdclk)),
	.clrn((~ aclr)),
	.d(1'b1),
	.q(wire_rdaclr_q));
	Data_DCFF_alt_synch_pipe   rs_dgwp
	( 
	.clock(rdclk),
	.clrn((~ aclr)),
	.d(delayed_wrptr_g),
	.q(wire_rs_dgwp_q));
	Data_DCFF_alt_synch_pipe1   ws_dgrp
	( 
	.clock(wrclk),
	.clrn((~ aclr)),
	.d(rdptr_g),
	.q(wire_ws_dgrp_q));
	Data_DCFF_cmpr   rdempty_eq_comp
	( 
	.aeb(wire_rdempty_eq_comp_aeb),
	.dataa(wire_rs_dgwp_q),
	.datab(rdptr_g));
	Data_DCFF_cmpr   wrfull_eq_comp
	( 
	.aeb(wire_wrfull_eq_comp_aeb),
	.dataa(wire_ws_dgrp_q),
	.datab(wrptr_gs));
	Data_DCFF_cntr   cntr_b
	( 
	.aset(aclr),
	.clock(wrclk),
	.cnt_en(valid_wrreq),
	.cout(wire_cntr_b_cout),
	.q(wire_cntr_b_q));
	assign
		int_rdempty = wire_rdempty_eq_comp_aeb,
		int_wrfull = wire_wrfull_eq_comp_aeb,
		q = wire_fifo_ram_q_b,
		ram_address_a = {(wrptr_g[12] ^ wrptr_g[11]), wrptr_g[10:0]},
		ram_address_b = {(wire_rdptr_g1p_q[11] ^ wire_rdptr_g1p_q[10]), wire_rdptr_g1p_q[9:0]},
		rdcnt_addr_ena = (valid_rdreq | (~ p0addr)),
		rdempty = int_rdempty,
		valid_rdreq = (rdreq & (~ int_rdempty)),
		valid_wrreq = (wrreq & (~ int_wrfull)),
		wrfull = int_wrfull,
		wrptr_gs = {(~ wrptr_g[12]), (~ wrptr_g[11]), wrptr_g[10:1]};
endmodule //Data_DCFF_dcfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module Data_DCFF (
	aclr,
	data,
	rdclk,
	rdreq,
	wrclk,
	wrreq,
	q,
	rdempty,
	wrfull)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	[3:0]  data;
	input	  rdclk;
	input	  rdreq;
	input	  wrclk;
	input	  wrreq;
	output	[7:0]  q;
	output	  rdempty;
	output	  wrfull;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0	  aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  sub_wire0;
	wire  sub_wire1;
	wire [7:0] sub_wire2;
	wire  rdempty = sub_wire0;
	wire  wrfull = sub_wire1;
	wire [7:0] q = sub_wire2[7:0];

	Data_DCFF_dcfifo	Data_DCFF_dcfifo_component (
				.wrclk (wrclk),
				.rdreq (rdreq),
				.aclr (aclr),
				.rdclk (rdclk),
				.wrreq (wrreq),
				.data (data),
				.rdempty (sub_wire0),
				.wrfull (sub_wire1),
				.q (sub_wire2));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "0"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "-1"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "0"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "-1"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "0"
// Retrieval info: PRIVATE: Clock NUMERIC "4"
// Retrieval info: PRIVATE: Depth NUMERIC "4096"
// Retrieval info: PRIVATE: Empty NUMERIC "1"
// Retrieval info: PRIVATE: Full NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "1"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "0"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "0"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "1"
// Retrieval info: PRIVATE: Width NUMERIC "4"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "1"
// Retrieval info: PRIVATE: diff_widths NUMERIC "1"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "8"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "1"
// Retrieval info: PRIVATE: rsFull NUMERIC "0"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "0"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "0"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "1"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "0"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "4096"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "OFF"
// Retrieval info: CONSTANT: LPM_TYPE STRING "dcfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "4"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "12"
// Retrieval info: CONSTANT: LPM_WIDTHU_R NUMERIC "11"
// Retrieval info: CONSTANT: LPM_WIDTH_R NUMERIC "8"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: RDSYNC_DELAYPIPE NUMERIC "4"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: CONSTANT: WRITE_ACLR_SYNCH STRING "OFF"
// Retrieval info: CONSTANT: WRSYNC_DELAYPIPE NUMERIC "4"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT GND aclr
// Retrieval info: USED_PORT: data 0 0 4 0 INPUT NODEFVAL data[3..0]
// Retrieval info: USED_PORT: q 0 0 8 0 OUTPUT NODEFVAL q[7..0]
// Retrieval info: USED_PORT: rdclk 0 0 0 0 INPUT NODEFVAL rdclk
// Retrieval info: USED_PORT: rdempty 0 0 0 0 OUTPUT NODEFVAL rdempty
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL rdreq
// Retrieval info: USED_PORT: wrclk 0 0 0 0 INPUT NODEFVAL wrclk
// Retrieval info: USED_PORT: wrfull 0 0 0 0 OUTPUT NODEFVAL wrfull
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL wrreq
// Retrieval info: CONNECT: @data 0 0 4 0 data 0 0 4 0
// Retrieval info: CONNECT: q 0 0 8 0 @q 0 0 8 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @rdclk 0 0 0 0 rdclk 0 0 0 0
// Retrieval info: CONNECT: @wrclk 0 0 0 0 wrclk 0 0 0 0
// Retrieval info: CONNECT: rdempty 0 0 0 0 @rdempty 0 0 0 0
// Retrieval info: CONNECT: wrfull 0 0 0 0 @wrfull 0 0 0 0
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: GEN_FILE: TYPE_NORMAL Data_DCFF.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL Data_DCFF.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL Data_DCFF.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL Data_DCFF.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL Data_DCFF_inst.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL Data_DCFF_waveforms.html FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL Data_DCFF_wave*.jpg FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL Data_DCFF_syn.v TRUE
// Retrieval info: LIB_FILE: altera_mf
